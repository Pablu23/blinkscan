// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: manga_queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createManga = `-- name: CreateManga :one
insert into manga (
  provider_id, title, requested_from, created
) values (
  $1, $2, $3, NOW()
)
returning id, provider_id, title, thumbnail_id, latest_chapter, requested_from, last_updated, created
`

type CreateMangaParams struct {
	ProviderID    pgtype.UUID
	Title         string
	RequestedFrom pgtype.UUID
}

func (q *Queries) CreateManga(ctx context.Context, arg CreateMangaParams) (Manga, error) {
	row := q.db.QueryRow(ctx, createManga, arg.ProviderID, arg.Title, arg.RequestedFrom)
	var i Manga
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Title,
		&i.ThumbnailID,
		&i.LatestChapter,
		&i.RequestedFrom,
		&i.LastUpdated,
		&i.Created,
	)
	return i, err
}

const getManga = `-- name: GetManga :one
select id, provider_id, title, thumbnail_id, latest_chapter, requested_from, last_updated, created from manga
where id = $1
`

func (q *Queries) GetManga(ctx context.Context, id pgtype.UUID) (Manga, error) {
	row := q.db.QueryRow(ctx, getManga, id)
	var i Manga
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Title,
		&i.ThumbnailID,
		&i.LatestChapter,
		&i.RequestedFrom,
		&i.LastUpdated,
		&i.Created,
	)
	return i, err
}

const getMangas = `-- name: GetMangas :many
select id, provider_id, title, thumbnail_id, latest_chapter, requested_from, last_updated, created from manga
`

func (q *Queries) GetMangas(ctx context.Context) ([]Manga, error) {
	rows, err := q.db.Query(ctx, getMangas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Manga
	for rows.Next() {
		var i Manga
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Title,
			&i.ThumbnailID,
			&i.LatestChapter,
			&i.RequestedFrom,
			&i.LastUpdated,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMangasForUser = `-- name: GetMangasForUser :many
select m.id, provider_id, title, thumbnail_id, latest_chapter, requested_from, last_updated, created, asm.id, account_id, manga_id from manga as m
join account_subscribed_manga as asm on asm.manga_id = m.id
where asm.account_id = $1
`

type GetMangasForUserRow struct {
	ID            pgtype.UUID
	ProviderID    pgtype.UUID
	Title         string
	ThumbnailID   pgtype.UUID
	LatestChapter pgtype.Int4
	RequestedFrom pgtype.UUID
	LastUpdated   pgtype.Timestamp
	Created       pgtype.Timestamp
	ID_2          pgtype.UUID
	AccountID     pgtype.UUID
	MangaID       pgtype.UUID
}

func (q *Queries) GetMangasForUser(ctx context.Context, accountID pgtype.UUID) ([]GetMangasForUserRow, error) {
	rows, err := q.db.Query(ctx, getMangasForUser, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMangasForUserRow
	for rows.Next() {
		var i GetMangasForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Title,
			&i.ThumbnailID,
			&i.LatestChapter,
			&i.RequestedFrom,
			&i.LastUpdated,
			&i.Created,
			&i.ID_2,
			&i.AccountID,
			&i.MangaID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
