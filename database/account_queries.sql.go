// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
insert into account (
  name, base64_pwd_hash, base64_pwd_salt
) values (
  $1, $2, $3
)
returning id, name, base64_pwd_hash, base64_pwd_salt
`

type CreateAccountParams struct {
	Name          string
	Base64PwdHash string
	Base64PwdSalt string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.Base64PwdHash, arg.Base64PwdSalt)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Base64PwdHash,
		&i.Base64PwdSalt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
select id, name, base64_pwd_hash, base64_pwd_salt from account
where id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Base64PwdHash,
		&i.Base64PwdSalt,
	)
	return i, err
}

const getAccountByName = `-- name: GetAccountByName :one
select id, name, base64_pwd_hash, base64_pwd_salt from account
where name = $1
`

func (q *Queries) GetAccountByName(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByName, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Base64PwdHash,
		&i.Base64PwdSalt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
select id, name, base64_pwd_hash, base64_pwd_salt from account
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Base64PwdHash,
			&i.Base64PwdSalt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedForAccount = `-- name: GetSubscribedForAccount :many
select m.id, provider_id, title, thumbnail_id, latest_chapter, requested_from, last_updated, created, asm.id, account_id, manga_id 
from manga as m
join account_subscribed_manga as asm on asm.manga_id = m.id
where asm.account_id = $1
`

type GetSubscribedForAccountRow struct {
	ID            uuid.UUID
	ProviderID    uuid.UUID
	Title         string
	ThumbnailID   pgtype.UUID
	LatestChapter pgtype.Int4
	RequestedFrom pgtype.UUID
	LastUpdated   pgtype.Timestamp
	Created       pgtype.Timestamp
	ID_2          uuid.UUID
	AccountID     uuid.UUID
	MangaID       uuid.UUID
}

func (q *Queries) GetSubscribedForAccount(ctx context.Context, accountID uuid.UUID) ([]GetSubscribedForAccountRow, error) {
	rows, err := q.db.Query(ctx, getSubscribedForAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubscribedForAccountRow
	for rows.Next() {
		var i GetSubscribedForAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Title,
			&i.ThumbnailID,
			&i.LatestChapter,
			&i.RequestedFrom,
			&i.LastUpdated,
			&i.Created,
			&i.ID_2,
			&i.AccountID,
			&i.MangaID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getViewedForAccountAndManga = `-- name: GetViewedForAccountAndManga :many
select c.id, title, number, url, manga_id, avc.id, account_id, chapter_id, viewed_at
from chapter as c
join account_viewed_chapter as avc on avc.chapter_id = c.id
where account_id = $1
and c.manga_id = $2
`

type GetViewedForAccountAndMangaParams struct {
	AccountID uuid.UUID
	MangaID   uuid.UUID
}

type GetViewedForAccountAndMangaRow struct {
	ID        uuid.UUID
	Title     string
	Number    int32
	Url       string
	MangaID   uuid.UUID
	ID_2      uuid.UUID
	AccountID uuid.UUID
	ChapterID uuid.UUID
	ViewedAt  pgtype.Timestamp
}

func (q *Queries) GetViewedForAccountAndManga(ctx context.Context, arg GetViewedForAccountAndMangaParams) ([]GetViewedForAccountAndMangaRow, error) {
	rows, err := q.db.Query(ctx, getViewedForAccountAndManga, arg.AccountID, arg.MangaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetViewedForAccountAndMangaRow
	for rows.Next() {
		var i GetViewedForAccountAndMangaRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Number,
			&i.Url,
			&i.MangaID,
			&i.ID_2,
			&i.AccountID,
			&i.ChapterID,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
